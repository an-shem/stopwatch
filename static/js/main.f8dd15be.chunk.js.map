{"version":3,"sources":["components/Scoreboard/Scoreboard.styled.jsx","components/Scoreboard/Scoreboard.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/AppStopwatch/App.styled.jsx","components/AppStopwatch/App.js","helpers/timeСonversion.js","index.js"],"names":["ScoreboardStopwatch","styled","div","Scoreboard","time","hours","mins","secs","StopwatchButton","button","Button","titel","handelOnClick","type","onClick","AppWrap","WrapperButton","initialStateTime","App","useState","setTime","isStart","setIsStart","counter","setCounter","isReset","setIsReset","previousTime","setPreviousTime","subscription","useRef","useEffect","objTime","pad","value","String","padStart","Math","floor","getTimeComponents","timeСonversion","start","timer","Observable","observer","counterObs","setInterval","next","stop","current","subscribe","unsubscribe","currentTime","Date","now","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEaA,EAAsBC,IAAOC,IAAV,4W,OCAjB,SAASC,EAAT,GAA+B,IAATC,EAAQ,EAARA,KAC3BC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KACrB,OAAO,cAACP,EAAD,qBAA0BK,EAA1B,gBAAuCC,EAAvC,gBAAmDC,EAAnD,OCFF,I,IAAMC,EAAkBP,IAAOQ,OAAV,kjBCAb,SAASC,EAAT,GAA2C,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,cACtC,OACE,cAACJ,EAAD,CAAiBK,KAAK,SAASC,QAASF,EAAxC,SACGD,ICHA,IAAMI,EAAUd,IAAOC,IAAV,mUAcPc,EAAgBf,IAAOC,IAAV,0ECTpBe,EAAmB,CAAEZ,MAAO,KAAMC,KAAM,KAAMC,KAAM,MAE3C,SAASW,IAAO,IAAD,EACJC,mBAASF,GADL,mBACrBb,EADqB,KACfgB,EADe,OAEED,oBAAS,GAFX,mBAErBE,EAFqB,KAEZC,EAFY,OAGEH,mBAAS,GAHX,mBAGrBI,EAHqB,KAGZC,EAHY,OAIEL,oBAAS,GAJX,mBAIrBM,EAJqB,KAIZC,EAJY,OAKYP,mBAAS,GALrB,mBAKrBQ,EALqB,KAKPC,EALO,KAOxBC,EAAeC,mBAEnBC,qBAAU,WACR,IAAMC,ECnBK,SAAwB5B,GAOrC,SAAS6B,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAEnC,OATA,SAA2BhC,GAIzB,MAAO,CAAEC,MAHK4B,EAAII,KAAKC,MAAOlC,EAAI,MAAL,OAGbE,KAFH2B,EAAII,KAAKC,MAAOlC,EAAI,KAAL,MAENG,KADT0B,EAAII,KAAKC,MAAOlC,EAAI,IAAkB,OAM9CmC,CAAkBnC,GDSPoC,CAAyB,IAAVjB,GAC/BH,EAAQ,eAAKY,MACZ,CAACT,IAEJQ,qBAAU,WACJN,IACFgB,IACAf,GAAW,MAEZ,CAACD,IAEJ,IAAMiB,EAAQ,IAAIC,KAAW,SAACC,GAC5B,IAAIC,EAAa,EAAItB,EACrBuB,aAAY,WACVF,EAASG,KAAKF,OACb,QAGCJ,EAAQ,WACRpB,EACF2B,KAGF1B,GAAW,GACXO,EAAaoB,QAAUP,EAAMQ,UAAU,CACrCH,KAAM,SAAC3C,GACLoB,EAAWpB,QAKX4C,EAAO,WACXnB,EAAaoB,SAAWpB,EAAaoB,QAAQE,cAC7C/B,EAAQH,GACRK,GAAW,GACXE,EAAW,GACXK,EAAaoB,QAAU,MA0BzB,OACE,eAAClC,EAAD,WACE,cAACZ,EAAD,CAAYC,KAAMA,IAClB,eAACY,EAAD,WACE,cAACN,EAAD,CAAQC,MAAM,eAAeC,cAAe6B,IAC5C,cAAC/B,EAAD,CAAQC,MAAM,OAAOC,cAjBT,WAChB,GAAKe,EAEE,CACL,IAAIyB,EAAcC,KAAKC,MACnBF,EAAczB,GAAgB,MATpCE,EAAaoB,SAAWpB,EAAaoB,QAAQE,cAC7C7B,GAAW,IAWTM,EAAgBwB,QANhBxB,EAAgByB,KAAKC,UAgBnB,cAAC5C,EAAD,CAAQC,MAAM,QAAQC,cA7Bd,WACPiB,EAAaoB,UAClBD,IACAtB,GAAW,aExDf6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvC,EAAD,MAEFwC,SAASC,eAAe,W","file":"static/js/main.f8dd15be.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const ScoreboardStopwatch = styled.div`\r\n  width: 500px;\r\n  height: 200px;\r\n  font-size: 70px;\r\n  font-weight: 500;\r\n  align-self: center;\r\n  line-height: 1.8;\r\n  padding: 40px;\r\n  margin-bottom: 30px;\r\n  text-align: center;\r\n  background-color: #dddbb5a1;\r\n  border-radius: 30px;\r\n  box-shadow: inset 2px 2px 5px rgba(154, 147, 140, 0.5), 1px 1px 5px rgba(255, 255, 255, 1);\r\n`;\r\n","import { ScoreboardStopwatch } from './Scoreboard.styled';\r\n\r\nexport default function Scoreboard({ time }) {\r\n  const { hours, mins, secs } = time;\r\n  return <ScoreboardStopwatch>{` ${hours}  :  ${mins}  :  ${secs} `}</ScoreboardStopwatch>;\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StopwatchButton = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 150px;\r\n  align-items: center;\r\n  padding: 8px 10px;\r\n  border: 1px solid #c9c1c1;\r\n  border-radius: 14px;\r\n  font-style: italic;\r\n  font-weight: 700;\r\n  font-size: 18px;\r\n  line-height: 20px;\r\n  letter-spacing: 0.03em;\r\n  text-align: center;\r\n  color: #5c6061;\r\n  background-color: #dddbb5a1;\r\n  box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.37) inset;\r\n  cursor: pointer;\r\n\r\n  &:not(:last-child) {\r\n    margin-right: 15px;\r\n  }\r\n  &:hover {\r\n    background-color: #edda9f;\r\n  }\r\n`;\r\n","import { StopwatchButton } from './Button.styled';\r\n\r\nexport default function Button({ titel, handelOnClick }) {\r\n  return (\r\n    <StopwatchButton type=\"button\" onClick={handelOnClick}>\r\n      {titel}\r\n    </StopwatchButton>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const AppWrap = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  width: 600px;\r\n  height: 600px;\r\n  margin: 10px auto 0;\r\n  color: #5c6061;\r\n  background-color: #f5f4d38a;\r\n  border: 1px solid #c9c1c1;\r\n  border-radius: 50%;\r\n  box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.37) inset;\r\n`;\r\n\r\nexport const WrapperButton = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport { Observable } from 'rxjs';\r\nimport timeСonversion from '../../helpers/timeСonversion';\r\nimport Scoreboard from '../Scoreboard';\r\nimport Button from '../Button';\r\nimport { AppWrap, WrapperButton } from './App.styled';\r\n\r\nconst initialStateTime = { hours: '00', mins: '00', secs: '00' };\r\n\r\nexport default function App() {\r\n  const [time, setTime] = useState(initialStateTime);\r\n  const [isStart, setIsStart] = useState(false);\r\n  const [counter, setCounter] = useState(0);\r\n  const [isReset, setIsReset] = useState(false);\r\n  const [previousTime, setPreviousTime] = useState(0);\r\n\r\n  let subscription = useRef();\r\n\r\n  useEffect(() => {\r\n    const objTime = timeСonversion(counter * 1000);\r\n    setTime({ ...objTime });\r\n  }, [counter]);\r\n\r\n  useEffect(() => {\r\n    if (isReset) {\r\n      start();\r\n      setIsReset(false);\r\n    }\r\n  }, [isReset]);\r\n\r\n  const timer = new Observable((observer) => {\r\n    let counterObs = 1 + counter;\r\n    setInterval(() => {\r\n      observer.next(counterObs++);\r\n    }, 1000);\r\n  });\r\n\r\n  const start = () => {\r\n    if (isStart) {\r\n      stop();\r\n      return;\r\n    }\r\n    setIsStart(true);\r\n    subscription.current = timer.subscribe({\r\n      next: (time) => {\r\n        setCounter(time);\r\n      },\r\n    });\r\n  };\r\n\r\n  const stop = () => {\r\n    subscription.current && subscription.current.unsubscribe();\r\n    setTime(initialStateTime);\r\n    setIsStart(false);\r\n    setCounter(0);\r\n    subscription.current = null;\r\n  };\r\n\r\n  const reset = () => {\r\n    if (!subscription.current) return;\r\n    stop();\r\n    setIsReset(true);\r\n  };\r\n\r\n  const wait = () => {\r\n    subscription.current && subscription.current.unsubscribe();\r\n    setIsStart(false);\r\n  };\r\n\r\n  const doubleTap = () => {\r\n    if (!previousTime) {\r\n      setPreviousTime(Date.now());\r\n    } else {\r\n      let currentTime = Date.now();\r\n      if (currentTime - previousTime <= 300) {\r\n        wait();\r\n      }\r\n      setPreviousTime(currentTime);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppWrap>\r\n      <Scoreboard time={time} />\r\n      <WrapperButton>\r\n        <Button titel=\"Start / Stop\" handelOnClick={start} />\r\n        <Button titel=\"Wait\" handelOnClick={doubleTap} />\r\n        <Button titel=\"Reset\" handelOnClick={reset} />\r\n      </WrapperButton>\r\n    </AppWrap>\r\n  );\r\n}\r\n","export default function timeСonversion(time) {\r\n  function getTimeComponents(time) {\r\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    return { hours, mins, secs };\r\n  }\r\n  function pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n  return getTimeComponents(time);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/AppStopwatch';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}